version: 2.1
jobs:
  build:
    docker:
      - image: quay.io/cybozu/golang:1.12-bionic
    working_directory: /work
    steps:
      - checkout
      - run: make -f topolvm-node/Makefile SUDO="" setup
      - run: make setup SUDO=""
      - run: make test
      - run: make build
      - run:
          command: |
            mkdir /tmp/workspace
            cp -a ./build/* /tmp/workspace
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - csi-attacher
            - csi-node-driver-registrar
            - csi-provisioner
            - hypertopolvm
  build-image:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Copy binaries
          command: |
            mkdir -p build
            cp /tmp/workspace/* build/
      - setup_remote_docker
      - run:
          name: Build image
          command: |
            docker build -t quay.io/cybozu/topolvm:latest .
      - run:
          name: Save image
          command: |
            mkdir -p /tmp/docker
            docker save quay.io/cybozu/topolvm:latest -o /tmp/docker/image
      - persist_to_workspace:
          root: /tmp/docker
          paths:
            - image
  push-image:
    docker:
      - image: docker:stable
    steps:
      - attach_workspace:
          at: /tmp/docker
      - setup_remote_docker
      - run: docker load -i /tmp/docker/image
      - run:
          name: Push docker image to Quay.io
          command: |
            docker login -u $QUAY_USER -p $QUAY_PASSWORD quay.io
            echo "pushing topolvm image ..."
            TAG=$(echo $CIRCLE_TAG | cut -c 2-)
            docker tag quay.io/cybozu/topolvm:latest quay.io/cybozu/topolvm:$TAG
            docker push quay.io/cybozu/topolvm:$TAG
            if echo $TAG | grep -q -e - ; then
                echo ===== Skip pushing branch tags for pre-release $TAG =====
                exit 0
            fi
            BRANCH=$(echo $TAG | cut -d "." -f 1-2)
            docker tag quay.io/cybozu/topolvm:latest quay.io/cybozu/topolvm:$BRANCH
            docker push quay.io/cybozu/topolvm:$BRANCH
  test-node:
    machine: true
    working_directory: /home/circleci/work
    steps:
      - checkout
      - run:
          name: install lvm
          command: |
            sudo apt-get update
            sudo apt-get -y install --no-install-recommends lvm2
      - run:
          name: setup golang
          command: |
            sudo rm -rf /usr/local/go
            GO_VERSION=1.12.5
            curl -fsSL -o go${GO_VERSION}.linux-amd64.tar.gz https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz
      - run:
          name: run lvmd test
          command: sudo env "GO111MODULE=on" "CIRCLECI=${CIRCLECI}" "CIRCLECI_EXECUTOR=machine" /usr/local/go/bin/go test -mod=vendor -race -v ./lvmd
      - run:
          name: run csi node test
          command: sudo env "GO111MODULE=on" "CIRCLECI=${CIRCLECI}" "CIRCLECI_EXECUTOR=machine" /usr/local/go/bin/go test -mod=vendor -race -v ./csi
  microtest:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: /home/circleci/work
    steps:
      - checkout
      - run:
          name: Update PATH and Define Environment Variable at Runtime
          command: |
            echo 'export GOPATH=/home/circleci/go' >> $BASH_ENV
            echo 'export PATH=$PATH:$GOPATH/bin' >> $BASH_ENV
            echo 'export CIRCLECI_EXECUTOR=machine' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: setup golang
          command: |
            sudo rm -rf /usr/local/go
            GO_VERSION=1.12.5
            curl -fsSL -o go${GO_VERSION}.linux-amd64.tar.gz https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz
      - run:
          name: Setup
          command: |
            cd microtest
            make CONTAINER_BUILDER=docker setup
      - run:
          name: Watch apiserver
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/watch_service snap.microk8s.daemon-apiserver
          background: true
      - run:
          name: Watch scheduler
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/watch_service snap.microk8s.daemon-scheduler
          background: true
      - run:
          name: Watch controller-manager
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/watch_service snap.microk8s.daemon-controller-manager
          background: true
      - run:
          name: Watch kubelet
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/watch_service snap.microk8s.daemon-kubelet
          background: true
      - run:
          name: Watch topolvm-node topolvm-node container
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/watch_pod kube-system app.kubernetes.io/name=csi-topolvm-node topolvm-node
          background: true
      - run:
          name: Watch topolvm-node node container
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/watch_pod kube-system app.kubernetes.io/name=csi-topolvm-node node
          background: true
      - run:
          name: Watch csi-topolvm-controller controller container
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/watch_pod kube-system app.kubernetes.io/name=csi-topolvm-controller controller
          background: true
      - run:
          name: Run test
          command: |
            cd microtest
            make CONTAINER_BUILDER=docker test

workflows:
  version: 2
  main:
    jobs:
      - build
      - build-image:
          requires:
            - build
      - test-node
      - microtest
  release:
    jobs:
      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - build-image:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - push-image:
          requires:
            - build-image
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
